<?php

/**
 * @file
 * Implements the vcs payment gateway in Drupal Commerce checkout.
 */

/**
 * Implements hook_menu().
 */
function commerce_vcs_menu() {
  $items = array();

  // Define the path to receive ITNs.
  $items['commerce_vcs/itn/%commerce_payment_method_instance'] = array(
    'page callback' => 'commerce_vcs_process_itn',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_vcs_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_vcs'] = array(
    'title' => t('Virtual Card Services (VCS)'),
    'description' => t('Integrates with the Virtual Card Services (VCS) payment gateway.'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_vcs_settings_form($settings = NULL) {
  $form = array();

  $form['merchant_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Virtual Card Services (VCS) Terminal ID as given by the VCS'),
    '#description' => t('The Virtual Card Services (VCS) Terminal ID as given by the VCS as given by the vcs system.'),
    '#default_value' => isset($settings['merchant_key']) ? $settings['merchant_key'] : '',
    '#required' => TRUE,
  );

  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('Virtual Card Services (VCS) server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => isset($settings['server']) ? $settings['server'] : 'sandbox',
  );

  return $form;
}

/**
 * Payment method callback: redirect form, a wrapper around the module's
 *   general use function for building a vcs Website Payments form.
 */
function commerce_vcs_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $settings = $payment_method['settings'];

  $customer = array();
  $commerce_customer = commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
  $account = user_load($commerce_customer->uid);
  $commerce_customer = $commerce_customer->commerce_customer_address['und'][0];

  // @TODO: Need to determine the style of name field being used
  if (empty($commerce_customer['first_name'])) {
    $customer['first_name'] = $commerce_customer['name_line'];
  }
  else {
    $customer['first_name'] = $commerce_customer['first_name'];
  }
  $customer['last_name'] = $commerce_customer['last_name'];
  $customer['mail'] = $account->mail;

  // @TODO: If user is anonymous then we need to get their email address from
  //   the "account information" field.
  
  // Build the data array that will be translated into hidden form values.
  $data = array(
    // Receiver Details
    //'merchant_id' => $settings['merchant_id'],
    'p1' => $settings['merchant_key'],
    'return_url' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'p10' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
    'notify_url' => url('commerce_vcs/itn/' . $payment_method['instance_id'], array('absolute' => TRUE)),

    // Payer Details
    'CardholderEmail' => $customer['mail'],

    // Transaction Details
    'p2' => $order->order_id . '-' . REQUEST_TIME,
    'p4' => round(commerce_currency_amount_to_decimal($amount, $currency_code), 2),
    'item_name' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'p3' => t('Product count: !count', array('!count' => commerce_line_items_quantity($wrapper->commerce_line_items, commerce_product_line_item_types()))),

  );
  
  
  // Give other modules a chance to alter the payment settings before they're
  // sent off.
  $hook = 'commerce_vcs_website_payment_settings';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $function($data, $order, $payment_method);
  }

  // Generate MD5 security signature
  $signature = array();
  foreach ($data as $name => $value) {
    if ($value) {
      $signature[] = $name . '=' . urlencode($value);
    }
  }
  $data['signature'] = md5(implode('&', $signature));

  //$form['#method'] = 'post';
  $form['#action'] = commerce_vcs_server_url($settings['server']);
  $form['#attributes'] = array('name' => 'frmPay');

  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Virtual Card Services(VCS)'),
  );

  return $form;
}

/**
 * Return the vcs server url.
 *
 * @param $server - One of 'sandbox' or 'live'.
 * @return the appropriate server URL based on the $server setting.
 */
function commerce_vcs_server_url($server) {
  switch ($server) {
    case 'sandbox':
      return 'https://www.vcs.co.za/vvonline/ccform.asp';
    case 'live':
      return 'https://www.vcs.co.za/vvonline/ccform.asp';
  }
}

/**
 * Processes an incoming ITN.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 *
 * @return
 *   TRUE or FALSE indicating if the ITN was successfully processed.
 */
function commerce_vcs_process_itn($payment_method) {
  $itn = $_POST;
  
  /***** Verify the security hash *****/

  // Order of the parameters is important. Also, we can't include extra data
  // that may have been passed in. The list of keys comes from:
  $keys = array('p1','p2', 'p3', 'p4', 'p5', 'p6', 'p7', 'item_name', 'p8', 'p9', 'p10', 'amount_fee', 'amount_net', 'custom_str1', 'custom_str2', 'custom_str3', 'custom_str4', 'custom_str5', 'custom_int1', 'custom_int2', 'custom_int3', 'custom_int4', 'custom_int5', 'name_first', 'name_last', 'email_address');
  sort($keys);
  $security = array();
  foreach ($keys as $key) {
    if (array_key_exists($key, $itn) && !empty($itn[$key])) {
      $security[] = $key . '=' . urlencode(stripslashes($itn[$key]));
    }
  }

  $post_data = implode('&', $security);
  $security = md5(implode(';', $security));
  // Skipping the security hash check as the documentation appears to be inconsistent with the
  // actual implementation. The security provided by the hash is questionable anyway.
  if (FALSE && (isset($itn['security']) || $security != $itn['security'])) {
    watchdog('commerce_vcs', 'Security hash does not match', array(), WATCHDOG_ERROR);
    commerce_vcs_itn_response(t('Failed: Security hash does not match'));
  }
  
  // Make sure Uti is available in lower-case
  $itn['uti'] = NULL;
  if (isset($itn['Uti'])) {
    $itn['uti'] = $itn['Uti'];
  }

  /***** Verify the source IP address *****/
  $vcs_hosts = array(
    'www.vcs.co.za',
    'vcs.co.za',
    'ftp.vcs.co.za',
  );
  $vcs_ips = array();
  foreach ($vcs_hosts as $hostname) {
    if ($ips = gethostbynamel($hostname)) {
      $vcs_ips = array_merge($vcs_ips, $ips);
    }
  }
  $vcs_ips = array_unique($vcs_ips);

  if (!in_array($_SERVER['REMOTE_ADDR'], $vcs_ips)) {
    watchdog('commerce_vcs', 'Source IP address doesn\'t match a known VCS host: REMOTE_ADDR=!REMOTE_ADDR', array('!REMOTE_ADDR' => $_SERVER['REMOTE_ADDR']), WATCHDOG_ERROR);
    commerce_vcs_itn_response(t('Failed: Source IP address doesn\'t match a known vcs host'));
  }

  // Process the HTTP request to validate the ITN.
  $server = commerce_vcs_server_url($payment_method['settings']['server']);
  $response = drupal_http_request($server, array('method' => 'POST', 'data' => $post_data));

  // If an error occurred during processing, log the message and exit.
  if (property_exists($response, 'error')) {
    watchdog('commerce_vcs', 'Attempt to validate ITN failed with error @code: @error', array('@code' => $response->code, '@error' => $response->error), WATCHDOG_ERROR);
    commerce_vcs_itn_response(t('Failed: Failed: Attempt to validate ITN failed with error @code: @error', array('@code' => $response->code, '@error' => $response->error)));
  }

  if ($response->data == 'INVALID') {
    watchdog('commerce_vcs', 'Invalid ITN received and ignored due to INVALID response.', array(), WATCHDOG_ALERT);
    commerce_vcs_itn_response(t('Failed: Invalid ITN received and ignored due to INVALID response.'));
  }

  // Exit if the ITN has already been processed.
  if (!empty($itn['uti']) && $prior_itn = commerce_vcs_itn_load($itn['uti'])) {
    if ($prior_itn['p3'] == $itn['p3']) {
      watchdog('commerce_vcs', 'Attempted to process an ITN that has already been processed with transaction ID @txn_id.', array('@txn_id' => $itn['Uti']), WATCHDOG_NOTICE);
      commerce_vcs_itn_response(t('Failed: Attempted to process an ITN that has already been processed with transaction ID @txn_id.', array('@txn_id' => $itn['Uti'])));
    }
  }
  
  // Load the order in question and validate that the Reference Number (p2) exists
  list($order_id, $timestamp) = explode('-', $itn['p2']);
  $order = commerce_order_load($order_id);
  if (!$order) {
    watchdog('commerce_vcs', 'Could not find order matching ITN order #', array(), WATCHDOG_ERROR);
    commerce_vcs_itn_response(t('Failed: Could not find order matching ITN order #'));
  }

  // Set the key payment method variables  
  $merchant_settings = array(
    // 'id' => $payment_method['settings']['merchant_id'],
    // 'key' => $payment_method['settings']['p1'],
    'id' => $payment_method['settings']['merchant_key'],
  );

  // Allow multi-seller stores by providing a hook to alter the merchant info
  // just prior to validation.
  $hook = 'commerce_vcs_merchant_alter';
  foreach (module_implements($hook) as $module) {
    $function = $module . '_' . $hook;
    $function($merchant_settings, $order, $payment_method);
  }

  // Validate the ITN by checking the merchant_id and p1  
  if ($merchant_settings['id'] != $itn['p1']) {
    commerce_payment_redirect_pane_previous_page($order);
    watchdog('commerce_vcs', 'ITN rejected: Invalid merchant_id specified (@merchant_id).', array('@merchant_id' => $itn['p1']), WATCHDOG_ERROR);
    commerce_vcs_itn_response(t('Failed: ITN rejected: Invalid merchant_id specified (@merchant_id).', array('@merchant_id' => $itn['p1'])));
  }  

  // Get transaction status from compound value, 
  // Note: trim is required to remove space at end of string
  $authorisation_number = NULL;
  $transaction_status = NULL;
  if (strlen($itn['p3']) > 7) {
    $authorisation_number = substr(trim($itn['p3']), 0, 6);
    $transaction_status = substr(trim($itn['p3']), 6);
  }
  
  // Process the ITN
  if ($transaction_status == 'APPROVED') {
    // Add our transaction values, we only add them if they valid
    $itn['authorisation_number'] = $authorisation_number;
    $itn['transaction_status'] = $transaction_status;
  
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('vcs', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];

    $transaction->remote_id = $itn['CardHolderIpAddr'];
    $transaction->amount = commerce_currency_decimal_to_amount($itn['p6'], 'ZAR');
    $transaction->currency_code = 'ZAR';
    $transaction->payload[REQUEST_TIME] = $itn;
    $transaction->remote_status = $itn['p3'];
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('The payment has completed.');

    commerce_payment_transaction_save($transaction);

    commerce_payment_redirect_pane_next_page($order);
    watchdog('commerce_vcs', 'ITN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $itn['uti'], '@order_number' => $order->order_number), WATCHDOG_INFO);

    // Necessary to trigger order completion
    $order = commerce_order_status_update($order, 'checkout_complete');
    commerce_checkout_complete($order);
    
    // Add values required to save itn
    $itn['merchant_id'] = $merchant_settings['id'];
    $itn['email_address'] = $order->mail;
    $itn['transaction_id'] = $transaction->transaction_id;
    $itn['payment_status'] = $itn['p3'];
    $itn['amount_gross'] = $itn['p6'];
    $itn['amount_fee'] = 0;                 // This is not submitted to us as part of ITN, it will need to be calculated
    $itn['order_id'] = $order->order_id;
    $itn['server'] = $server;
    commerce_vcs_itn_save($itn);
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
    watchdog('commerce_vcs', 'Invalid ITN payment status: @payment_status. Bank code=!code, Status=!status', array('@payment_status' => $itn['p3'], '!code' => $authorisation_number, '!status' => $transaction_status), WATCHDOG_ERROR);
    commerce_vcs_itn_response(t('Failed: Invalid ITN payment status: @payment_status. Bank code=!code, Status=!status', array('@payment_status' => $itn['p3'], '!code' => $authorisation_number, '!status' => $transaction_status)));
  }

  // Invoke the hook here so implementations have access to the order and
  // payment method if available and a saved ITN array that includes the
  // payment transaction ID if created in the payment method's default
  // process callback.
  module_invoke_all('commerce_vcs_itn_process', $order, $payment_method, $itn);
  
  // Success
  commerce_vcs_itn_response(t('Accepted'));
}

/**
 * Build required response format required by VCS.
 *
 * @return
 *   String status message wrapped with required tag name
 */
function commerce_vcs_itn_response($message) {
  print '<CallbackResponse>' . $message . '</CallbackResponse>';
  exit(0);
}

/**
 * Loads a stored ITN by ID.
 *
 * @param $id
 *   The ID of the ITN to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric itn_id or the
 *     actual vcs Uti. Defaults to Uti.
 *
 * @return
 *   The original ITN with some meta data related to local processing.
 */
function commerce_vcs_itn_load($id, $type = 'uti') {
  return db_select('commerce_vcs_itn', 'cpi')
    ->fields('cpi')
    ->condition('cpi.' . $type, $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Saves an ITN with some meta data related to local processing.
 *
 * @param $itn
 *   An ITN array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the ITN.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the ITN is
 *     received by reference, it will also contain the serial numeric itn_id
 *     used locally.
 */
function commerce_vcs_itn_save(&$itn) {
  if (!empty($itn['itn_id']) && commerce_vcs_itn_load($itn['uti'])) {
    $itn['changed'] = REQUEST_TIME;
    return drupal_write_record('commerce_vcs_itn', $itn, 'itn_id');
  }
  else {
    $itn['created'] = REQUEST_TIME;
    $itn['changed'] = REQUEST_TIME;
    return drupal_write_record('commerce_vcs_itn', $itn);
  }
}